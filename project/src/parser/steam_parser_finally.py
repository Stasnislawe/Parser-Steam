import asyncio
import logging
import sys
import os
import time
import re
from typing import List, Dict, Optional
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium import webdriver
from selenium.webdriver.firefox.options import Options

current_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, current_dir)

from project.src.database.db_manager import DatabaseManager
from project.src.database.config import get_database_config
from project.src.utils.progress_manager import save_progress, load_progress


class SteamParserFinal:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        config = get_database_config()
        self.db_manager = DatabaseManager(config)
        self.processed_urls = set()
        self.driver = None

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.last_page_url, parsed_urls_set, self.total_parsed = load_progress()

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ URL –∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if parsed_urls_set:
            self.processed_urls.update(parsed_urls_set)

    async def init_driver(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        if self.driver:
            return

        firefox_options = Options()
        firefox_options.add_argument("--headless")
        firefox_options.add_argument("--no-sandbox")
        firefox_options.add_argument("--disable-dev-shm-usage")
        firefox_options.add_argument("--window-size=1920,1080")

        self.driver = webdriver.Firefox(options=firefox_options)
        print("‚úÖ –î—Ä–∞–π–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def close_driver(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –¥—Ä–∞–π–≤–µ—Ä"""
        if self.driver:
            self.driver.quit()
            self.driver = None
            print("‚úÖ –î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")

    async def parse_page_and_save_immediate(self, url: str, max_games: int = 500):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–¥–Ω–æ–≥–æ –¥—Ä–∞–π–≤–µ—Ä–∞ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–≥—Ä—ã"""
        await self.init_driver()
        saved = 0
        errors = 0

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
            if self.last_page_url:
                print(f"üîÅ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å: {self.last_page_url}")
                self.driver.get(self.last_page_url)
            else:
                print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                self.driver.get(url)

            time.sleep(5)

            games_count = 0
            click_count = 0
            max_clicks = 100
            page_number = 1

            while games_count < max_games and click_count < max_clicks:
                print(f"\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}, —Å–æ–±—Ä–∞–Ω–æ –∏–≥—Ä: {games_count}/{max_games}")

                # –ü–∞—Ä—Å–∏–º –∏–≥—Ä—ã —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                current_games = self._find_game_blocks()
                filtered_games = self._filter_unique_games(current_games)

                if not filtered_games:
                    print("‚ö†Ô∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–≥—Ä")
                    break

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                for game in filtered_games:
                    if games_count >= max_games:
                        break

                    game_url = game.get('url')
                    if game_url and game_url not in self.processed_urls:
                        print(f"üéÆ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä—É: {game.get('title', 'Unknown')}")

                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä—É
                        success = await self.process_single_game_async(game, game_url)

                        if success:
                            saved += 1
                            self.total_parsed += 1
                            self.processed_urls.add(game_url)
                            print(
                                f"‚úÖ [{self.total_parsed}] {game.get('title', 'Unknown')} - {game.get('current_price', '?')}")
                        else:
                            errors += 1

                        games_count += 1

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å–æ—Ö—Ä–∞–Ω—è–µ–º URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
                self.last_page_url = self.driver.current_url
                save_progress(self.last_page_url, list(self.processed_urls))
                print(f"üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å: {saved}/{max_games} –∏–≥—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –≤—Å–µ–≥–æ: {self.total_parsed}")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                if games_count < max_games:
                    if await self._load_next_page():
                        click_count += 1
                        page_number += 1
                        print(f"üîΩ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É... ({click_count}/{max_clicks})")
                        time.sleep(3)
                    else:
                        print("‚èπÔ∏è –ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü")
                        break

            return saved, errors

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            return saved, errors
        finally:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            save_progress(self.last_page_url, list(self.processed_urls))

    async def process_single_game_async(self, game: Dict, game_url: str) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∏–≥—Ä—É (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥—Ä–∞–π–≤–µ—Ä–∞)"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏–≥—Ä–∞–º–∏
            current_page_url = self.driver.current_url

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ—Ç–∞–ª–µ–π
            self.driver.get(game_url)
            time.sleep(2)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏

            # –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            details = self.parse_game_details(game_url)
            if details:
                game.update(details)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if not self._validate_game_data(game):
                print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {game.get('title')}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–≥—Ä–∞–º–∏
                self.driver.get(current_page_url)
                time.sleep(1)
                return False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            result = await self.db_manager.save_game_async(game)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–≥—Ä–∞–º–∏
            self.driver.get(current_page_url)
            time.sleep(1)

            return result is not None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä—ã {game_url}: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–≥—Ä–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                self.driver.get(self.last_page_url)
                time.sleep(1)
            except:
                pass
            return False

    def _validate_game_data(self, game_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —É –∏–≥—Ä—ã –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        required_fields = ['title', 'current_price', 'url']
        return all(field in game_data and game_data[field] for field in required_fields)

    def _find_game_blocks(self) -> List[Dict]:
        """–ò—â–µ—Ç –±–ª–æ–∫–∏ —Å –∏–≥—Ä–∞–º–∏ - –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø"""
        games = []

        try:
            # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—ã
            game_links = self.driver.find_elements(By.XPATH, "//a[contains(@href, '/app/')]")

            for link in game_links:
                try:
                    url = link.get_attribute('href')
                    if not url or 'steampowered.com/app/' not in url:
                        continue

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–∑—ã–≤—ã –∏ –¥—Ä—É–≥–∏–µ –Ω–µ-–∏–≥—Ä—ã
                    if any(x in url for x in ['/reviews', '/news', '/discussions', '/workshop']):
                        continue

                    # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–≥—Ä—ã
                    container = self._find_game_container(link)
                    if not container:
                        continue

                    game = self._parse_game_block(container, url)
                    if game and game['title'] != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                        games.append(game)

                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏: {e}")
                    continue

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤: {e}")

        return games

    def _find_game_container(self, element):
        """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–≥—Ä—ã"""
        try:
            # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ 3 —É—Ä–æ–≤–Ω—è –≤–≤–µ—Ä—Ö —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            container = element
            for _ in range(3):
                try:
                    container = container.find_element(By.XPATH, "./..")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Ü–µ–Ω—ã –∏ –¥—Ä—É–≥–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ
                    text = container.text.lower()
                    if any(x in text for x in ['—Ä—É–±', '‚ÇΩ', '—Ä.', '$', '‚Ç¨', '%']):
                        return container
                except:
                    break
        except:
            pass
        return None

    def _parse_game_block(self, container, url) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç –±–ª–æ–∫ –∏–≥—Ä—ã"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            title = self._extract_title(container)

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏–≥—Ä–∞ (–æ—Ç–∑—ã–≤—ã –∏ —Ç.–¥.)
            if any(x in title.lower() for x in ['–æ—Ç–∑—ã–≤', 'review', '–æ–±–∑–æ—Ä', 'discussion', '–Ω–æ–≤–æ—Å—Ç—å']):
                return None

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã –∏ —Å–∫–∏–¥–∫—É
            price_data = self._extract_prices(container)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_url = self._extract_image(container)

            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_title = self._clean_game_title(title)

            return {
                'title': clean_title,
                'current_price': price_data.get('current_price', ''),
                'original_price': price_data.get('original_price', ''),
                'discount': price_data.get('discount', ''),
                'url': url.split('?')[0],  # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                'image_url': image_url,
                'timestamp': time.time()
            }

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–ª–æ–∫–∞ –∏–≥—Ä—ã: {e}")
            return None

    def _filter_unique_games(self, games: List[Dict]) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ URL"""
        filtered_games = []
        seen_titles = set()
        seen_urls = set()

        for game in games:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ —Ü–µ–Ω—ã
            if not game['title'] or not game['current_price']:
                continue

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-–∏–≥—Ä—ã
            title_lower = game['title'].lower()
            if any(x in title_lower for x in ['–æ—Ç–∑—ã–≤', 'review', '–æ–±–∑–æ—Ä', 'discussion', '–Ω–æ–≤–æ—Å—Ç—å', 'news']):
                continue

            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            title_key = game['title'].lower().strip()
            url_key = game['url']

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            if title_key in seen_titles or url_key in seen_urls:
                continue

            seen_titles.add(title_key)
            seen_urls.add(url_key)
            filtered_games.append(game)

        return filtered_games

    def parse_game_details(self, game_url: str) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ"""
        if not self.driver:
            return {}

        try:
            # –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª–∏
            details = {
                'categories': self._extract_categories(),
                'review_rating': self._extract_review_rating(),
                'review_count': self._extract_review_count(),
                'image_url': self._extract_main_image(),
                'description': self._extract_description()
            }

            return details

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ—Ç–∞–ª–µ–π: {e}")
            return {}

    def _extract_title(self, element):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã"""
        try:
            # –ò—â–µ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
            for tag in ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']:
                titles = element.find_elements(By.TAG_NAME, tag)
                for title in titles:
                    text = title.text.strip()
                    if text and len(text) > 3 and not any(x in text.lower() for x in ['–æ—Ç–∑—ã–≤', 'review']):
                        return text

            # –ò—â–µ–º –≤ div —Å –∫–ª–∞—Å—Å–∞–º–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ title
            title_elements = element.find_elements(
                By.XPATH, ".//*[contains(@class, 'Title') or contains(@class, 'title')]"
            )
            for elem in title_elements:
                text = elem.text.strip()
                if text and len(text) > 3 and not any(x in text.lower() for x in ['–æ—Ç–∑—ã–≤', 'review']):
                    return text

            # –ò—â–µ–º —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
            links = element.find_elements(By.XPATH, ".//a[contains(@href, '/app/')]")
            for link in links:
                text = link.text.strip()
                if text and len(text) > 3 and not any(x in text.lower() for x in ['–æ—Ç–∑—ã–≤', 'review']):
                    return text

        except:
            pass
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def _extract_prices(self, element):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—ã –∏ —Å–∫–∏–¥–∫—É"""
        try:
            text = element.text

            # –ò—â–µ–º —Å–∫–∏–¥–∫—É
            discount = ""
            discount_match = re.search(r'-\d+%', text)
            if discount_match:
                discount = discount_match.group(0)

            # –ò—â–µ–º —Ü–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö
            prices = []
            price_patterns = [
                r'\d+[\s\.,]?\d*\s*—Ä—É–±',
                r'\d+[\s\.,]?\d*\s*‚ÇΩ',
                r'\d+[\s\.,]?\d*\s*—Ä\.',
            ]

            for pattern in price_patterns:
                matches = re.findall(pattern, text)
                prices.extend(matches)

            current_price = prices[-1] if prices else ""
            original_price = prices[0] if len(prices) > 1 else ""

            return {
                'current_price': current_price,
                'original_price': original_price,
                'discount': discount
            }

        except:
            return {}

    def _extract_image(self, element):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            images = element.find_elements(By.TAG_NAME, "img")
            for img in images:
                src = img.get_attribute('src')
                if src and ('header.jpg' in src or 'capsule' in src or 'steamstatic.com' in src):
                    return src
        except:
            pass
        return ""

    def _extract_description(self) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã"""
        try:
            # –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            desc_selectors = [
                "//div[contains(@class, 'game_description')]",
                "//div[contains(@class, 'description')]",
                "//div[contains(@class, 'game_review_description')]",
                "//div[contains(@data-featuretarget, 'description')]",
                "//meta[contains(@property, 'og:description')]"
            ]

            for selector in desc_selectors:
                try:
                    if selector.startswith("//meta"):
                        element = self.driver.find_element(By.XPATH, selector)
                        desc = element.get_attribute('content')
                    else:
                        element = self.driver.find_element(By.XPATH, selector)
                        desc = element.text

                    if desc and len(desc) > 10:
                        # –û—á–∏—â–∞–µ–º –∏ –æ–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                        clean_desc = re.sub(r'\s+', ' ', desc).strip()
                        return clean_desc[:300] + "..." if len(clean_desc) > 300 else clean_desc

                except:
                    continue

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è: {e}")

        return ""

    def _extract_categories(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–≥—Ä—ã"""
        try:
            categories = []
            category_elements = self.driver.find_elements(
                By.XPATH, "//div[contains(@class, 'game_category')]//a"
            )
            for elem in category_elements:
                category = elem.text.strip()
                if category:
                    categories.append(category)
            return categories
        except:
            return []

    def _extract_review_rating(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤"""
        try:
            rating_elem = self.driver.find_element(
                By.XPATH, "//meta[contains(@itemprop, 'ratingValue')]"
            )
            return rating_elem.get_attribute('content')
        except:
            return ""

    def _extract_review_count(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤"""
        try:
            count_elem = self.driver.find_element(
                By.XPATH, "//meta[contains(@itemprop, 'reviewCount')]"
            )
            return count_elem.get_attribute('content')
        except:
            return ""

    def _extract_main_image(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            img_elem = self.driver.find_element(
                By.XPATH, "//meta[contains(@property, 'og:image')]"
            )
            return img_elem.get_attribute('content')
        except:
            return ""

    def _clean_game_title(self, title: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        if not title:
            return title

        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        clean_title = re.sub(r'\s+', ' ', title).strip()

        # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è Steam –ø—Ä–µ—Ñ–∏–∫—Å—ã/—Å—É—Ñ—Ñ–∏–∫—Å—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        clean_title = re.sub(r'(‚Ñ¢|¬Æ|¬©|[-‚Äì‚Äî]\s*$)', '', clean_title).strip()

        return clean_title

    async def _load_next_page(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏
            button_selectors = [
                "//button[contains(text(), '–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ')]",
                "//button[contains(text(), 'Show more')]",
                "//button[contains(@class, 'show_more')]",
                "//a[contains(text(), '–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ')]",
                "//a[contains(text(), 'Show more')]",
                "//div[contains(@class, 'show_more')]//button",
                "//div[contains(@class, 'load_more')]//button"
            ]

            for selector in button_selectors:
                try:
                    button = WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, selector))
                    )
                    if button.is_displayed():
                        button.click()
                        time.sleep(3)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {selector}")
                        return True
                except:
                    continue

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–Ω–æ–ø–∫—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä offset –≤ URL
            current_url = self.driver.current_url
            if 'offset=' in current_url:
                # –ü—Ä–æ–±—É–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å offset –≤—Ä—É—á–Ω—É—é
                match = re.search(r'offset=(\d+)', current_url)
                if match:
                    current_offset = int(match.group(1))
                    new_offset = current_offset + 12
                    new_url = re.sub(r'offset=\d+', f'offset={new_offset}', current_url)
                    self.driver.get(new_url)
                    time.sleep(3)
                    print(f"üîó –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: offset={new_offset}")
                    return True

            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É '–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ'")
            return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return False


async def main():
    logging.basicConfig(level=logging.INFO)

    parser = SteamParserFinal()

    print("üéÆ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –æ–¥–Ω–∏–º –¥—Ä–∞–π–≤–µ—Ä–æ–º –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π")
    print("=" * 60)

    saved, errors = await parser.parse_page_and_save_immediate(
        url="https://store.steampowered.com/specials/?l=russian&flavor=contenthub_topsellers",
        max_games=500
    )

    print(f"\nüéØ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved} –∏–≥—Ä")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {errors}")
    print(f"   üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(saved / (saved + errors)) * 100:.1f}%" if (saved + errors) > 0 else "N/A")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –≤ –∫–æ–Ω—Ü–µ
    await parser.close_driver()


if __name__ == "__main__":
    asyncio.run(main())