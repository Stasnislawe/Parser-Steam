import json
import re

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F
from aiogram.enums import ParseMode
from project.src.database.db_manager import DatabaseManager
from project.src.database.config import get_database_config
from project.config.settings import SettingsManager, DisplayMode, GamesCount, UserPagination, GameMode
from project.src.bot.keyboards import (
    get_main_keyboard, get_discounts_keyboard, get_pagination_keyboard,
    get_settings_main_keyboard, get_display_settings_keyboard, get_count_settings_keyboard
)
import asyncio
import logging


class SteamBot:
    def __init__(self, token: str):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.logger = logging.getLogger(__name__)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        config = get_database_config()
        self.db_manager = DatabaseManager(config)

        # –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.settings_manager = SettingsManager()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback'–æ–≤"""

        # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ====================

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        @self.dp.message(Command("start"))
        @self.dp.message(F.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        async def main_menu(message: types.Message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Steam –±–æ—Ç!\n\n"
                "üéÆ –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ª—É—á—à–∏–µ —Å–∫–∏–¥–∫–∏ –∏–∑ Steam –º–∞–≥–∞–∑–∏–Ω–∞",
                reply_markup=get_main_keyboard()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )

        # –†–∞–∑–¥–µ–ª —Å–∫–∏–¥–æ–∫ - –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä
        @self.dp.message(F.text == "üéÆ –°–∫–∏–¥–∫–∏ –Ω–∞ –∏–≥—Ä—ã")
        async def discounts_section(message: types.Message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä"""
            await message.answer(
                "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä:",
                reply_markup=get_discounts_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            )

        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–≥—Ä—ã
        @self.dp.message(F.text == "üî• –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ")
        async def popular_games(message: types.Message):
            """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–≥—Ä—ã"""
            await self._show_games_by_mode(message, GameMode.POPULAR)

        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä—ã —Å —Å–∞–º—ã–º–∏ –≤—ã—Å–æ–∫–∏–º–∏ —Å–∫–∏–¥–∫–∞–º–∏
        @self.dp.message(F.text == "üí∞ –°–∞–º—ã–µ –≤—ã—Å–æ–∫–∏–µ —Å–∫–∏–¥–∫–∏")
        async def discounted_games(message: types.Message):
            """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–≥—Ä—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ —Å–∫–∏–¥–∫–∞–º–∏"""
            await self._show_games_by_mode(message, GameMode.DISCOUNTED)

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—Ç–∏—é –∏–≥—Ä
        @self.dp.message(F.text == "‚ñ∂Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–ª—å—à–µ")
        async def show_next_batch(message: types.Message):
            """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –≥—Ä—É–ø–ø—É –∏–≥—Ä"""
            await self._show_next_batch(message)

        # –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        @self.dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        async def settings_button(message: types.Message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
            await self._show_settings(message)

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
        @self.dp.message(F.text == "üÜò –ü–æ–º–æ—â—å")
        async def help_button(message: types.Message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞"""
            help_text = (
                "üìñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:</b>\n\n"
                "üéÆ <b>–°–∫–∏–¥–∫–∏ –Ω–∞ –∏–≥—Ä—ã</b> - –†–∞–∑–¥–µ–ª —Å –∏–≥—Ä–∞–º–∏\n"
                "üî• <b>–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ</b> - –ù–æ–≤—ã–µ –∏–≥—Ä—ã\n"
                "üí∞ <b>–°–∞–º—ã–µ –≤—ã—Å–æ–∫–∏–µ —Å–∫–∏–¥–∫–∏</b> - –õ—É—á—à–∏–µ —Å–∫–∏–¥–∫–∏\n"
                "‚ñ∂Ô∏è <b>–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–ª—å—à–µ</b> - –°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä—Ç–∏—è –∏–≥—Ä\n"
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
                "üîô <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> - –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
            )
            await message.answer(help_text, parse_mode=ParseMode.HTML)

        # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK'–û–í ====================

        # –ì–ª–∞–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ñ–æ—Ä–º–∞—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä)
        @self.dp.callback_query(F.data.startswith("settings_"))
        async def settings_callback(callback: types.CallbackQuery):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
            await self._handle_settings_callback(callback)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π, –ø–æ–ª–Ω—ã–π)
        @self.dp.callback_query(F.data.startswith("display_"))
        async def display_callback(callback: types.CallbackQuery):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
            await self._handle_display_callback(callback)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä (1, 2, 3, 6, 12)
        @self.dp.callback_query(F.data.startswith("count_"))
        async def count_callback(callback: types.CallbackQuery):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö –∏–≥—Ä"""
            await self._handle_count_callback(callback)

    async def _show_games_by_mode(self, message: types.Message, game_mode: GameMode):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–≥—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        GameMode.POPULAR - —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–≥—Ä—ã
        GameMode.DISCOUNTED - –∏–≥—Ä—ã —Å —Å–∞–º—ã–º–∏ –≤—ã—Å–æ–∫–∏–º–∏ —Å–∫–∏–¥–∫–∞–º–∏
        """
        user_id = message.from_user.id
        settings = self.settings_manager.get_user_settings(user_id)  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏–≥—Ä—ã...")

        try:
            # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if game_mode == GameMode.POPULAR:
                games = self.db_manager.get_most_popular_games(limit=settings.games_count.value)
                total_count = self.db_manager.get_total_games_count()
                mode_name = "–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ"
            else:
                games = self.db_manager.get_highest_discount_games(limit=settings.games_count.value)
                total_count = self.db_manager.get_total_discounted_games_count()
                mode_name = "—Å–æ —Å–∫–∏–¥–∫–∞–º–∏"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–≥—Ä
            if not games:
                await message.answer(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ {mode_name} –∏–≥—Ä.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            settings.pagination = UserPagination(
                current_games=games,  # –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
                current_index=0,  # –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å (–¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞)
                all_loaded_games=games,  # –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
                total_count=total_count,  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –≤ –±–∞–∑–µ
                offset=len(games),  # –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
                has_more=len(games) < total_count,  # –ï—Å—Ç—å –ª–∏ –µ—â–µ –∏–≥—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                game_mode=game_mode  # –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            )
            self.settings_manager.update_pagination(user_id, settings.pagination)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—Ç–∏—é –∏–≥—Ä
            await self._show_current_batch(message, settings)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä")

    async def _show_next_batch(self, message: types.Message):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—Ç–∏—é –∏–≥—Ä"""
        user_id = message.from_user.id
        settings = self.settings_manager.get_user_settings(user_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä
        if not settings.pagination or not settings.pagination.has_more:
            await message.answer("üìã –í—Å–µ –∏–≥—Ä—ã —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω—ã!")
            return

        await message.answer("üì• –ó–∞–≥—Ä—É–∂–∞—é —Å–ª–µ–¥—É—é—â–∏–µ –∏–≥—Ä—ã...")

        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if settings.pagination.game_mode == GameMode.POPULAR:
                new_games = self.db_manager.get_most_popular_games(
                    offset=settings.pagination.offset,  # –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                    limit=settings.games_count.value  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                )
            else:
                new_games = self.db_manager.get_highest_discount_games(
                    offset=settings.pagination.offset,
                    limit=settings.games_count.value
                )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            if not new_games:
                settings.pagination.has_more = False
                self.settings_manager.update_pagination(user_id, settings.pagination)
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä—ã.")
                return

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            settings.pagination.all_loaded_games.extend(new_games)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–≥—Ä—ã –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É
            settings.pagination.offset += len(new_games)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ
            settings.pagination.has_more = settings.pagination.offset < settings.pagination.total_count  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∏–≥—Ä—ã
            self.settings_manager.update_pagination(user_id, settings.pagination)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∏–≥—Ä—ã
            start_index = len(settings.pagination.all_loaded_games) - len(new_games)
            await self._show_games_batch(message, settings, start_index)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä")

    async def _show_current_batch(self, message: types.Message, settings):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–∞—Ä—Ç–∏—é –∏–≥—Ä (–Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–π)"""
        await self._show_games_batch(message, settings, 0)

    async def _show_games_batch(self, message: types.Message, settings, start_index: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–≥—Ä—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        games = settings.pagination.all_loaded_games[start_index:]

        if not games:
            await message.answer("‚ùå –ù–µ—Ç –∏–≥—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞.")
            return

        # –ü–æ–æ—á–µ—Ä–µ–¥–Ω—ã–π –≤—ã–≤–æ–¥ –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for i, game in enumerate(games, start_index + 1):
            response = self._format_game_response(game, settings.display_mode)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
            response += f"\n\nüìã {i}/{settings.pagination.total_count}"  # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            await message.answer(response, parse_mode=ParseMode.HTML)
            await asyncio.sleep(0.3)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏
        if settings.pagination.has_more:
            await message.answer(
                f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ {len(games)} –∏–≥—Ä. –í—Å–µ–≥–æ: {settings.pagination.total_count}\n"
                "‚ñ∂Ô∏è –ù–∞–∂–º–∏—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–ª—å—à–µ' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",
                reply_markup=get_pagination_keyboard(True)  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–î–∞–ª—å—à–µ"
            )
        else:
            await message.answer(
                f"‚úÖ –í—Å–µ –∏–≥—Ä—ã –ø–æ–∫–∞–∑–∞–Ω—ã! –í—Å–µ–≥–æ: {settings.pagination.total_count}",
                reply_markup=get_pagination_keyboard(False)  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
            )

    def _format_game_response(self, game: dict, display_mode: DisplayMode) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç
        –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        """
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        title = game.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        current_price = game.get('current_price', '?')
        discount = game.get('discount', '')
        url = game.get('url', '')
        original_price = game.get('original_price', '')
        image_url = game.get('image_url', '')
        description = game.get('description', '')
        categories = game.get('categories', '[]')

        # –î–û–ë–ê–í–ò–ú –û–¢–õ–ê–î–û–ß–ù–£–Æ –ü–ï–ß–ê–¢–¨ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò
        print(f"DEBUG: –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {display_mode}")
        print(f"DEBUG: DisplayMode.MINIMAL = {DisplayMode.MINIMAL}")
        print(f"DEBUG: display_mode == DisplayMode.MINIMAL: {display_mode == DisplayMode.MINIMAL}")

        # –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú - —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ
        if display_mode == DisplayMode.MINIMAL:
            response = f"üéÆ <b>{title}</b>\n\n"

            # –¶–µ–Ω—ã –∏ —Å–∫–∏–¥–∫–∞
            if original_price and original_price != current_price:
                response += f"üí∞ <s>{original_price}</s> ‚Üí <b>{current_price}</b>\n"
                if discount:
                    response += f"üî• <b>{discount}</b>\n"
            else:
                response += f"üí∞ <b>{current_price}</b>\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
            response += f"\nüîó <a href='{url}'>–ö—É–ø–∏—Ç—å –≤ Steam</a>"
            return response

        # –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –†–ï–ñ–ò–ú - –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        elif display_mode == DisplayMode.STANDARD:
            response = f"üéÆ <b>{title}</b>\n\n"

            # –¶–µ–Ω—ã
            if original_price and original_price != current_price:
                response += f"üí∞ <s>{original_price}</s> ‚Üí <b>{current_price}</b>\n"
            else:
                response += f"üí∞ <b>{current_price}</b>\n"

            # –°–∫–∏–¥–∫–∞
            if discount:
                response += f"üî• <b>{discount}</b>\n\n"
            else:
                response += "\n"

            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å—Å—ã–ª–∫–∞
            if image_url:
                response += f"üñºÔ∏è <a href='{image_url}'>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</a>\n"
            response += f"üîó <a href='{url}'>–ö—É–ø–∏—Ç—å –≤ Steam</a>"
            return response

        # –ü–û–õ–ù–´–ô –†–ï–ñ–ò–ú - –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        elif display_mode == DisplayMode.FULL:
            response = f"üéÆ <b>{title}</b>\n\n"

            # –¶–µ–Ω—ã
            if original_price and original_price != current_price:
                response += f"üìä <b>–¶–µ–Ω–∞:</b> <s>{original_price}</s> ‚Üí <b>{current_price}</b>\n"
            else:
                response += f"üìä <b>–¶–µ–Ω–∞:</b> {current_price}\n"

            # –°–∫–∏–¥–∫–∞
            if discount:
                response += f"üéØ <b>–°–∫–∏–¥–∫–∞:</b> {discount}\n\n"
            else:
                response += "\n"

            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories_text = self._parse_categories(categories)
            if categories_text:
                response += f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {categories_text}\n"

            # –û–ø–∏—Å–∞–Ω–∏–µ
            if description and len(description.strip()) > 10:
                clean_desc = re.sub(r'<[^>]*>', '', description)
                clean_desc = re.sub(r'\s+', ' ', clean_desc).strip()
                short_desc = clean_desc[:150] + "..." if len(clean_desc) > 150 else clean_desc
                response += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {short_desc}\n\n"

            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å—Å—ã–ª–∫–∞
            if image_url:
                response += f"üñºÔ∏è <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> <a href='{image_url}'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å</a>\n"
            response += f"üîó <b>–°—Å—ã–ª–∫–∞:</b> <a href='{url}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–≥—Ä–µ</a>"
            return response

        # fallback - –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º
        return f"üéÆ <b>{title}</b>\nüí∞ <b>{current_price}</b>\nüîó <a href='{url}'>–ö—É–ø–∏—Ç—å –≤ Steam</a>"

    def _parse_categories(self, categories_data: str) -> str:
        """
        –ü–∞—Ä—Å–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–≥—Ä –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–≤—ã–º–∏ 3 –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        """
        if not categories_data or categories_data == '[]':
            return ""

        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
            categories_list = json.loads(categories_data)
            if isinstance(categories_list, list) and categories_list:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                return ', '.join(str(cat) for cat in categories_list[:3])
        except (json.JSONDecodeError, TypeError):
            # –ï—Å–ª–∏ –Ω–µ JSON, –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É
            try:
                clean_categories = categories_data.strip('[]"\'')  # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                if clean_categories:
                    categories = [cat.strip() for cat in clean_categories.split(',')]
                    return ', '.join(categories[:3])
            except:
                pass

        return ""

    async def _show_settings(self, message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
        user_id = message.from_user.id
        settings = self.settings_manager.get_user_settings(user_id)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        text = (
            "‚öôÔ∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n\n"
            f"üé® <b>–§–æ—Ä–º–∞—Ç:</b> {self._get_display_mode_name(settings.display_mode)}\n"
            f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä:</b> {settings.games_count.value}\n\n"
            "–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
        )

        await message.answer(
            text,
            reply_markup=get_settings_main_keyboard(),  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            parse_mode=ParseMode.HTML
        )

    def get_settings_main_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üé® –§–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="settings_display")],
                [InlineKeyboardButton(text="üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä", callback_data="settings_count")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="settings_back")]
            ]
        )

    def get_display_settings_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üì± –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π", callback_data="display_minimal")],
                [InlineKeyboardButton(text="üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", callback_data="display_standard")],
                [InlineKeyboardButton(text="üìã –ü–æ–ª–Ω—ã–π", callback_data="display_full")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings_back_main")]
            ]
        )

    def get_count_settings_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä"""
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="1 –∏–≥—Ä–∞", callback_data="count_1")],
                [InlineKeyboardButton(text="2 –∏–≥—Ä—ã", callback_data="count_2")],
                [InlineKeyboardButton(text="3 –∏–≥—Ä—ã", callback_data="count_3")],
                [InlineKeyboardButton(text="6 –∏–≥—Ä", callback_data="count_6")],
                [InlineKeyboardButton(text="12 –∏–≥—Ä", callback_data="count_12")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings_back_main")]
            ]
        )

    async def _handle_settings_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        action = callback.data

        # –ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if action == "settings_back":
            await callback.message.delete()
            await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã")
            return

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if action == "settings_back_main":
            await self._show_main_settings(callback)
            return

        user_id = callback.from_user.id

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if action == "settings_display":
            await self._show_display_settings(callback)
        elif action == "settings_count":
            await self._show_count_settings(callback)

    async def _handle_display_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        action = callback.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ñ–æ—Ä–º–∞—Ç–∞ (minimal/standard/full)
        user_id = callback.from_user.id

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if action == "minimal":
            self.settings_manager.set_display_mode(user_id, DisplayMode.MINIMAL)
            mode_name = "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π"
            mode_desc = "–¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–∫–∏–¥–∫–∞"
        elif action == "standard":
            self.settings_manager.set_display_mode(user_id, DisplayMode.STANDARD)
            mode_name = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"
            mode_desc = "–ù–∞–∑–≤–∞–Ω–∏–µ, —Å–∫–∏–¥–∫–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å—Å—ã–ª–∫–∞"
        elif action == "full":
            self.settings_manager.set_display_mode(user_id, DisplayMode.FULL)
            mode_name = "–ü–æ–ª–Ω—ã–π"
            mode_desc = "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await callback.message.edit_text(
            f"‚úÖ <b>–§–æ—Ä–º–∞—Ç –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
            f"üì± <b>–†–µ–∂–∏–º:</b> {mode_name}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {mode_desc}\n\n"
            "–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
            reply_markup=get_settings_main_keyboard(),
            parse_mode=ParseMode.HTML
        )
        await callback.answer()

    async def _handle_count_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö –∏–≥—Ä"""
        count_str = callback.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        user_id = callback.from_user.id

        try:
            count = int(count_str)
            games_count = GamesCount(count)
            self.settings_manager.set_games_count(user_id, games_count)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await callback.message.edit_text(
                f"‚úÖ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –∏–∑–º–µ–Ω–µ–Ω–æ</b>\n\n"
                f"üî¢ –¢–µ–ø–µ—Ä—å –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å: <b>{count} –∏–≥—Ä</b>\n\n"
                "–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
                reply_markup=get_settings_main_keyboard(),
                parse_mode=ParseMode.HTML
            )
            await callback.answer()

        except ValueError:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")

    async def _show_main_settings(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–¥–ª—è callback'–æ–≤)"""
        user_id = callback.from_user.id
        settings = self.settings_manager.get_user_settings(user_id)

        text = (
            "‚öôÔ∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n\n"
            f"üé® <b>–§–æ—Ä–º–∞—Ç:</b> {self._get_display_mode_name(settings.display_mode)}\n"
            f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä:</b> {settings.games_count.value}\n\n"
            "–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
        )

        await callback.message.edit_text(
            text,
            reply_markup=get_settings_main_keyboard(),
            parse_mode=ParseMode.HTML
        )

    async def _show_display_settings(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        user_id = callback.from_user.id
        settings = self.settings_manager.get_user_settings(user_id)

        text = (
            "üé® <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: <b>{self._get_display_mode_name(settings.display_mode)}</b>\n\n"
            "üì± <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π</b> - —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–∫–∏–¥–∫–∞\n"
            "üìä <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</b> - –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–∫–∏–¥–∫–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å—Å—ã–ª–∫–∞\n"
            "üìã <b>–ü–æ–ª–Ω—ã–π</b> - –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º\n\n"
            "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç:"
        )

        await callback.message.edit_text(
            text,
            reply_markup=self.get_display_settings_keyboard(),
            parse_mode=ParseMode.HTML
        )

    async def _show_count_settings(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä"""
        user_id = callback.from_user.id
        settings = self.settings_manager.get_user_settings(user_id)

        text = (
            "üî¢ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{settings.games_count.value} –∏–≥—Ä</b>\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–∫–æ–ª—å–∫–æ –∏–≥—Ä –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–∫–∏–¥–æ–∫:"
        )

        await callback.message.edit_text(
            text,
            reply_markup=self.get_count_settings_keyboard(),
            parse_mode=ParseMode.HTML
        )

    def _get_display_mode_name(self, mode: DisplayMode) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        names = {
            DisplayMode.MINIMAL: "üì± –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π",
            DisplayMode.STANDARD: "üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π",
            DisplayMode.FULL: "üìã –ü–æ–ª–Ω—ã–π"
        }
        return names.get(mode, "üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            self.logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            await self.dp.start_polling(self.bot)  # –ó–∞–ø—É—Å–∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–ø—Ä–æ—Å–∞
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        finally:
            await self.bot.session.close()  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏