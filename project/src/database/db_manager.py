import json
import re
from typing import List, Dict, Optional
from datetime import datetime
from sqlalchemy import create_engine, text, select, desc, func
from sqlalchemy.orm import sessionmaker
import asyncio
from concurrent.futures import ThreadPoolExecutor
from .models import Base, SteamGame, GamePriceHistory, create_tables, get_session
from .config import get_database_config


class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Steam –∏–≥—Ä"""

    def __init__(self, config=None):
        self.config = config or get_database_config()
        self.engine = create_engine(
            self.config.connection_string,
            pool_size=self.config.pool_size,
            max_overflow=self.config.max_overflow,
            echo=self.config.echo
        )
        self.Session = sessionmaker(bind=self.engine)

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã)"""
        create_tables(self.engine)

    # –î–û–ë–ê–í–õ–Ø–ï–ú –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ú–ï–¢–û–î–´:
    def extract_app_id_from_url(self, url: str) -> Optional[int]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç app_id –∏–∑ URL –∏–≥—Ä—ã Steam
        –ü—Ä–∏–º–µ—Ä: https://store.steampowered.com/app/123456/Game_Name/ -> 123456
        """
        try:
            match = re.search(r'/app/(\d+)/', url)
            if match:
                return int(match.group(1))
        except:
            pass
        return None

    def parse_price(self, price_str: str) -> tuple:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Ü–µ–Ω—ã –≤ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—Ü–µ–Ω–∞_–≤_—Ä—É–±–ª—è—Ö, –≤–∞–ª—é—Ç–∞)
        """
        try:
            if not price_str:
                return 0.0, 'RUB'

            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç—ã
            clean_price = price_str.replace(' ', '').replace('—Ä—É–±', '').replace('‚ÇΩ', '').replace('—Ä.', '')

            # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
            clean_price = clean_price.replace(',', '.')

            return float(clean_price), 'RUB'
        except:
            return 0.0, 'RUB'

    def parse_discount_percent(self, discount_str: str) -> int:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç
        –ü—Ä–∏–º–µ—Ä: "-50%" -> 50
        """
        try:
            if not discount_str:
                return 0

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
            match = re.search(r'(\d+)', discount_str)
            if match:
                return int(match.group(1))
        except:
            pass
        return 0

    def save_game(self, game_data: Dict) -> Optional[SteamGame]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–≥—Ä—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        session = self.Session()
        try:
            print(f"üíæ –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {game_data.get('title')}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º app_id –∏–∑ URL
            app_id = self.extract_app_id_from_url(game_data.get('url', ''))
            print(f"   App ID: {app_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–∞ —É–∂–µ
            existing_game = None
            if app_id:
                existing_game = session.query(SteamGame).filter(SteamGame.app_id == app_id).first()
            else:
                existing_game = session.query(SteamGame).filter(SteamGame.url == game_data['url']).first()

            if existing_game:
                print(f"   üéØ –ò–≥—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...")
                game = self._update_existing_game(existing_game, game_data)
            else:
                print(f"   üÜï –ù–æ–≤–∞—è –∏–≥—Ä–∞, —Å–æ–∑–¥–∞–µ–º...")
                game = self._create_new_game(game_data, app_id)

            session.add(game)
            session.commit()

            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! ID: {game.id}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
            self._save_price_history(game, session)

            return game

        except Exception as e:
            session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã {game_data.get('title')}: {e}")
            import traceback
            traceback.print_exc()
            return None
        finally:
            session.close()

    def _create_new_game(self, game_data: Dict, app_id: Optional[int]) -> SteamGame:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ–± –∏–≥—Ä–µ"""
        current_price, currency = self.parse_price(game_data.get('current_price', ''))
        original_price, _ = self.parse_price(game_data.get('original_price', ''))
        discount_percent = self.parse_discount_percent(game_data.get('discount', ''))

        return SteamGame(
            app_id=app_id,
            title=game_data.get('title', ''),
            clean_title=game_data.get('title', '').lower().strip(),
            current_price=game_data.get('current_price', ''),
            original_price=game_data.get('original_price', ''),
            discount_percent=discount_percent,
            discount_amount=self._calculate_discount_amount(game_data),
            url=game_data.get('url', ''),
            image_url=game_data.get('image_url', ''),
            review_rating=game_data.get('review_rating', ''),
            review_count=game_data.get('review_count', ''),
            categories=json.dumps(game_data.get('categories', [])),
            description=game_data.get('description', ''),
            release_date=game_data.get('release_date', ''),
            is_discounted=discount_percent > 0,
            created_at=datetime.utcnow(),
            updated_at=datetime.utcnow(),
            last_checked=datetime.utcnow()
        )

    def _calculate_discount_amount(self, game_data: Dict) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É —Å–∫–∏–¥–∫–∏"""
        try:
            current_price, _ = self.parse_price(game_data.get('current_price', ''))
            original_price, _ = self.parse_price(game_data.get('original_price', ''))

            if current_price and original_price and original_price > current_price:
                discount_amount = original_price - current_price
                return f"{discount_amount:.0f} —Ä—É–±"
        except:
            pass
        return ""

    def _update_existing_game(self, game: SteamGame, game_data: Dict) -> SteamGame:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –æ–± –∏–≥—Ä–µ"""
        discount_percent = self.parse_discount_percent(game_data.get('discount', ''))

        game.current_price = game_data.get('current_price', game.current_price)
        game.original_price = game_data.get('original_price', game.original_price)
        game.description = game_data.get('description', game.description)
        game.discount_percent = discount_percent
        game.discount_amount = self._calculate_discount_amount(game_data)
        game.review_rating = game_data.get('review_rating', game.review_rating)
        game.review_count = game_data.get('review_count', game.review_count)
        game.categories = json.dumps(game_data.get('categories', []))
        game.image_url = game_data.get('image_url', game.image_url)
        game.updated_at = datetime.utcnow()
        game.last_checked = datetime.utcnow()
        game.is_discounted = discount_percent > 0

        return game

    async def save_game_async(self, game_data: Dict) -> Optional[SteamGame]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–≥—Ä—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        loop = asyncio.get_event_loop()
        with ThreadPoolExecutor() as executor:
            return await loop.run_in_executor(executor, self.save_game, game_data)

    async def save_games_batch_async(self, games_data: List[Dict]) -> List[Optional[SteamGame]]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—á–∫—É –∏–≥—Ä"""
        tasks = [self.save_game_async(game) for game in games_data]
        return await asyncio.gather(*tasks, return_exceptions=True)

    def _save_price_history(self, game: SteamGame, session):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –∏–≥—Ä—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Ü–µ–Ω–∞
            last_history = session.query(GamePriceHistory).filter(
                GamePriceHistory.app_id == game.app_id
            ).order_by(GamePriceHistory.recorded_at.desc()).first()

            if not last_history or last_history.current_price != game.current_price:
                price_history = GamePriceHistory(
                    app_id=game.app_id,
                    game_id=game.id,
                    current_price=game.current_price,
                    original_price=game.original_price,
                    discount_percent=game.discount_percent,
                    recorded_at=datetime.utcnow()
                )
                session.add(price_history)
                session.commit()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω: {e}")

    def get_discounted_games(self, min_discount: int = 0) -> List[SteamGame]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–≥—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π"""
        session = self.Session()
        try:
            return session.query(SteamGame).filter(
                SteamGame.is_discounted == True,
                SteamGame.discount_percent >= min_discount
            ).order_by(SteamGame.discount_percent.desc()).all()
        finally:
            session.close()

    def get_games_batch(self, offset: int = 0, limit: int = 12) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞—á–∫—É –∏–≥—Ä –∏–∑ –±–∞–∑—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        session = self.Session()
        try:
            result = session.query(SteamGame).order_by(
                desc(SteamGame.created_at)
            ).offset(offset).limit(limit).all()

            return [self._game_to_dict(game) for game in result]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä –∏–∑ –ë–î: {e}")
            return []
        finally:
            session.close()

    def get_total_games_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –≤ –±–∞–∑–µ"""
        session = self.Session()
        try:
            return session.query(SteamGame).count()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∏–≥—Ä: {e}")
            return 0
        finally:
            session.close()

    def search_games(self, query: str, limit: int = 20) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –∏–≥—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        session = self.Session()
        try:
            result = session.query(SteamGame).filter(
                SteamGame.title.ilike(f"%{query}%")
            ).order_by(desc(SteamGame.created_at)).limit(limit).all()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º created_at

            return [self._game_to_dict(game) for game in result]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä: {e}")
            return []
        finally:
            session.close()

    def get_games_by_discount(self, min_discount: int = 0, limit: int = 20) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–æ–π"""
        session = self.Session()
        try:
            result = session.query(SteamGame).filter(
                SteamGame.discount_percent >= min_discount
            ).order_by(desc(SteamGame.discount_percent)).limit(limit).all()

            return [self._game_to_dict(game) for game in result]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä –ø–æ —Å–∫–∏–¥–∫–µ: {e}")
            return []
        finally:
            session.close()

    def _game_to_dict(self, game: SteamGame) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç Game –≤ —Å–ª–æ–≤–∞—Ä—å"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏
        created_at_str = game.created_at.isoformat() if game.created_at else None
        updated_at_str = game.updated_at.isoformat() if game.updated_at else None
        last_checked_str = game.last_checked.isoformat() if game.last_checked else None

        return {
            'id': game.id,
            'title': game.title,
            'current_price': game.current_price,
            'original_price': game.original_price,
            'discount': f"-{game.discount_percent}%" if game.discount_percent > 0 else "",
            'url': game.url,
            'image_url': game.image_url,
            'categories': game.categories,
            'review_rating': game.review_rating,
            'review_count': game.review_count,
            'description': game.description,
            'timestamp': created_at_str  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        }

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –º–µ—Ç–æ–¥–æ–≤
    async def get_games_batch_async(self, offset: int = 0, limit: int = 12) -> List[Dict]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–∞—á–∫—É –∏–≥—Ä –∏–∑ –±–∞–∑—ã"""
        loop = asyncio.get_event_loop()
        with ThreadPoolExecutor() as executor:
            return await loop.run_in_executor(executor, self.get_games_batch, offset, limit)

    async def get_total_games_count_async(self) -> int:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä"""
        loop = asyncio.get_event_loop()
        with ThreadPoolExecutor() as executor:
            return await loop.run_in_executor(executor, self.get_total_games_count)

    async def search_games_async(self, query: str, limit: int = 20) -> List[Dict]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏—â–µ—Ç –∏–≥—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        loop = asyncio.get_event_loop()
        with ThreadPoolExecutor() as executor:
            return await loop.run_in_executor(executor, self.search_games, query, limit)

    async def get_games_by_discount_async(self, min_discount: int = 0, limit: int = 20) -> List[Dict]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π"""
        loop = asyncio.get_event_loop()
        with ThreadPoolExecutor() as executor:
            return await loop.run_in_executor(executor, self.get_games_by_discount, min_discount, limit)

    def get_game_by_url(self, url: str) -> Optional[SteamGame]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∏–≥—Ä—É –ø–æ URL"""
        session = self.Session()
        try:
            return session.query(SteamGame).filter(SteamGame.url == url).first()
        finally:
            session.close()

    def get_most_popular_games(self, offset: int = 0, limit: int = 12) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–≥—Ä—ã (–ø–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)"""
        session = self.Session()
        try:
            result = session.query(SteamGame).order_by(
                desc(SteamGame.created_at)
            ).offset(offset).limit(limit).all()

            return [self._game_to_dict(game) for game in result]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–≥—Ä: {e}")
            return []
        finally:
            session.close()

    def get_highest_discount_games(self, offset: int = 0, limit: int = 12) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä—ã —Å —Å–∞–º—ã–º–∏ –≤—ã—Å–æ–∫–∏–º–∏ —Å–∫–∏–¥–∫–∞–º–∏"""
        session = self.Session()
        try:
            result = session.query(SteamGame).filter(
                SteamGame.discount_percent > 0
            ).order_by(
                desc(SteamGame.discount_percent)
            ).offset(offset).limit(limit).all()

            return [self._game_to_dict(game) for game in result]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä —Å–æ —Å–∫–∏–¥–∫–∞–º–∏: {e}")
            return []
        finally:
            session.close()

    def get_total_discounted_games_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä —Å–æ —Å–∫–∏–¥–∫–æ–π"""
        session = self.Session()
        try:
            return session.query(SteamGame).filter(
                SteamGame.discount_percent > 0
            ).count()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∏–≥—Ä —Å–æ —Å–∫–∏–¥–∫–∞–º–∏: {e}")
            return 0
        finally:
            session.close()


# –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –ë–î
db_manager = DatabaseManager()