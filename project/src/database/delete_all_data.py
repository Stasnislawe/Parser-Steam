import sys
import os
from sqlalchemy import text

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from project.src.database.config import get_database_config
from project.src.database.db_manager import DatabaseManager


def delete_all_data():
    """–£–¥–∞–ª—è–µ—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã"""
    config = get_database_config()
    db_manager = DatabaseManager(config)

    print("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 40)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm = input("‚ùì –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")

    if confirm.lower() != 'y':
        print("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    session = db_manager.Session()

    try:
        # –û—Ç–∫–ª—é—á–∞–µ–º foreign key constraints –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        session.execute(text("SET session_replication_role = 'replica';"))

        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        tables = [
            'game_price_history',
            'game_category_association',
            'game_categories',
            'steam_games'
        ]

        for table in tables:
            try:
                result = session.execute(text(f"DELETE FROM {table};"))
                print(f"‚úÖ –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {table}: {result.rowcount} –∑–∞–ø–∏—Å–µ–π")
                session.commit()
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {table}: {e}")
                session.rollback()

        # –í–∫–ª—é—á–∞–µ–º foreign key constraints –æ–±—Ä–∞—Ç–Ω–æ
        session.execute(text("SET session_replication_role = 'origin';"))
        session.commit()

        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        session.rollback()
        import traceback
        traceback.print_exc()
    finally:
        session.close()


def check_empty_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –±–∞–∑–∞ –ø—É—Å—Ç–∞—è"""
    config = get_database_config()
    db_manager = DatabaseManager(config)

    session = db_manager.Session()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        tables = ['steam_games', 'game_price_history', 'game_category_association', 'game_categories']

        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã:")
        print("-" * 30)

        total_records = 0
        for table in tables:
            try:
                result = session.execute(text(f"SELECT COUNT(*) FROM {table};"))
                count = result.scalar()
                print(f"   {table}: {count} –∑–∞–ø–∏—Å–µ–π")
                total_records += count
            except:
                print(f"   {table}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        if total_records == 0:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç–∞—è!")
        else:
            print(f"‚ö†Ô∏è –í –±–∞–∑–µ –æ—Å—Ç–∞–ª–æ—Å—å {total_records} –∑–∞–ø–∏—Å–µ–π")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    finally:
        session.close()


if __name__ == "__main__":
    delete_all_data()
    check_empty_database()