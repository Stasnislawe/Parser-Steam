import json
import os
from dataclasses import dataclass, asdict, field
from typing import List, Optional, Any, Dict
from enum import Enum


class DisplayMode(Enum):
    MINIMAL = "minimal"
    STANDARD = "standard"
    FULL = "full"


class GamesCount(Enum):
    ONE = 1
    TWO = 2
    THREE = 3
    SIX = 6
    TWELVE = 12


class GameMode(Enum):
    POPULAR = "popular"
    DISCOUNTED = "discounted"
    CATEGORY = "category"


@dataclass
class UserPagination:
    current_games: List[dict] = field(default_factory=list)
    current_index: int = 0
    all_loaded_games: List[dict] = field(default_factory=list)
    total_count: int = 0
    offset: int = 0
    has_more: bool = True
    game_mode: GameMode = GameMode.POPULAR
    current_category: str = ""  # –ü–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    def to_dict(self) -> Dict[str, Any]:
        return {
            'current_games': self.current_games,
            'current_index': self.current_index,
            'all_loaded_games': self.all_loaded_games,
            'total_count': self.total_count,
            'offset': self.offset,
            'has_more': self.has_more,
            'game_mode': self.game_mode.value,
            'current_category': self.current_category
        }

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'UserPagination':
        return cls(
            current_games=data.get('current_games', []),
            current_index=data.get('current_index', 0),
            all_loaded_games=data.get('all_loaded_games', []),
            total_count=data.get('total_count', 0),
            offset=data.get('offset', 0),
            has_more=data.get('has_more', True),
            game_mode=GameMode(data.get('game_mode', 'popular')),
            current_category=data.get('current_category', '')
        )


@dataclass
class UserSettings:
    display_mode: DisplayMode = DisplayMode.STANDARD
    games_count: GamesCount = GamesCount.ONE
    pagination: Optional[UserPagination] = None
    awaiting_category: bool = False

    def to_dict(self) -> Dict[str, Any]:
        return {
            'display_mode': self.display_mode.value,
            'games_count': self.games_count.value,
            'pagination': self.pagination.to_dict() if self.pagination else None,
            'awaiting_category': self.awaiting_category
        }

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'UserSettings':
        pagination_data = data.get('pagination')
        pagination = UserPagination.from_dict(pagination_data) if pagination_data else None

        return cls(
            display_mode=DisplayMode(data.get('display_mode', 'standard')),
            games_count=GamesCount(data.get('games_count', 1)),
            pagination=pagination,
            awaiting_category=data.get('awaiting_category', False)
        )


class SettingsManager:
    def __init__(self):
        self.settings_file = "../user_settings.json"
        self.user_settings = {}
        self._load_settings()

    def _load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.settings_file):
            try:
                with open(self.settings_file, 'r', encoding='utf-8') as f:
                    content = f.read().strip()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                    if not content:
                        print("‚ö†Ô∏è –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—É—Å—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                        self._create_default_settings()
                        return

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
                    try:
                        data = json.loads(content)
                    except json.JSONDecodeError as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ JSON –≤ —Ñ–∞–π–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
                        print("üßπ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                        self._create_default_settings()
                        return

                    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è {len(data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    for user_id, settings_data in data.items():
                        try:
                            self.user_settings[int(user_id)] = UserSettings.from_dict(settings_data)
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                            # –°–æ–∑–¥–∞–µ–º default –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            self.user_settings[int(user_id)] = UserSettings()

            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
                print("üßπ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                self._create_default_settings()
        else:
            print("‚ÑπÔ∏è –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
            self._create_default_settings()

    def _create_default_settings(self):
        """–°–æ–∑–¥–∞–µ—Ç default –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.user_settings = {}
        self._save_settings()
        print("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    def _save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            data = {}
            for user_id, settings in self.user_settings.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å
                try:
                    settings_dict = settings.to_dict()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã
                    json.dumps(settings_dict)  # –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
                    data[str(user_id)] = settings_dict
                except (TypeError, ValueError) as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    continue

            # –°–æ–∑–¥–∞–µ–º backup —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
            if os.path.exists(self.settings_file):
                backup_file = f"{self.settings_file}.backup"
                import shutil
                shutil.copy2(self.settings_file, backup_file)
                print(f"üì¶ –°–æ–∑–¥–∞–Ω backup: {backup_file}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)

            print(f"üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è {len(data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ backup
            self._restore_from_backup()

    def _restore_from_backup(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ backup"""
        backup_file = f"{self.settings_file}.backup"
        if os.path.exists(backup_file):
            try:
                import shutil
                shutil.copy2(backup_file, self.settings_file)
                print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ backup: {backup_file}")
                self._load_settings()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ backup: {e}")
                self._create_default_settings()
        else:
            print("‚ö†Ô∏è Backup –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            self._create_default_settings()

    def get_user_settings(self, user_id: int) -> UserSettings:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_settings:
            print(f"üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            self.user_settings[user_id] = UserSettings()
            self._save_settings()
        return self.user_settings[user_id]

    def set_display_mode(self, user_id: int, display_mode: DisplayMode):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        settings = self.get_user_settings(user_id)
        settings.display_mode = display_mode
        self.user_settings[user_id] = settings
        self._save_settings()
        print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {display_mode.value} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    def set_games_count(self, user_id: int, games_count: GamesCount):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä"""
        settings = self.get_user_settings(user_id)
        settings.games_count = games_count
        self.user_settings[user_id] = settings
        self._save_settings()
        print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä: {games_count.value} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    def update_pagination(self, user_id: int, pagination: UserPagination):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        settings = self.get_user_settings(user_id)
        settings.pagination = pagination
        self.user_settings[user_id] = settings
        self._save_settings()
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    def clear_user_settings(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_settings:
            del self.user_settings[user_id]
            self._save_settings()
            print(f"üßπ –û—á–∏—â–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    def get_all_users(self) -> List[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return list(self.user_settings.keys())


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    manager = SettingsManager()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    test_user_id = 12345
    settings = manager.get_user_settings(test_user_id)
    print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}:")
    print(f"  Display mode: {settings.display_mode}")
    print(f"  Games count: {settings.games_count}")
    print(f"  Pagination: {settings.pagination}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    manager.set_display_mode(test_user_id, DisplayMode.FULL)
    manager.set_games_count(test_user_id, GamesCount.THREE)

    print("‚úÖ –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")